name: Dev Pipeline
run-name: Dev Pipeline - ${{ github.ref }} by ${{ github.actor }}
on:
  push:
    branches:
      - 'feature/**'
      - 'main'

jobs:
  frontend:
    runs-on: ubuntu-latest
    env:
      working-directory: website
    strategy:
      matrix:
        node-version: [lts/hydrogen]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-frontend-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-${{ env.cache-name }}-
            ${{ runner.os }}-frontend-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
        working-directory: ${{ env.working-directory }}

      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.working-directory }}

      - name: Run unit tests
        run: npm test -- --passWithNoTests --coverage
        working-directory: ${{ env.working-directory }}

      - name: Build Frontend
        run: npm run build
        working-directory: ${{ env.working-directory }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-frontend
          path: ${{ env.working-directory }}/dist
          retention-days: 2
          if-no-files-found: error

  backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20.0'

      - name: Check for linting errors
        uses: golangci/golangci-lint-action@v3.3.1
        with:
          version: v1.53
          args: --timeout=10m

      - name: Build Backend
        run: go build -o ./build/quantumlab ./cmd/main.go

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-backend
          path: build
          retention-days: 2
          if-no-files-found: error

  build-image:
    runs-on: ubuntu-latest
    needs:
      - frontend
      - backend
    outputs:
      image_tag: ${{ steps.image-tags.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-frontend
          path: build/website

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-backend
          path: build/backend

      - name: Set up Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/quantumlab-dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Branch build and push
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./script/dev/Dockerfile-branch
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Dev build and push
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./script/dev/Dockerfile-dev
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/quantumlab:dev

      - name: Print image tags
        id: image-tags
        run: |
          echo image_tag=${{ fromJSON(steps.docker_meta.outputs.json).labels['org.opencontainers.image.version'] }} >> $GITHUB_OUTPUT

  backend-unit-test:
    runs-on: ubuntu-latest
    needs:
      - backend
      - frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20.0'

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.run_id }}-frontend
          path: website/dist

      - name: Run unit tests
        run: go test -v ./...

  run-e2e-tests-on-mock:
    runs-on: ubuntu-latest
    needs:
      - frontend
#      - backend
    env:
      working-directory: website
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2] # Uses 2 parallel instances
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Cache dependencies
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-frontend-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-${{ env.cache-name }}-
            ${{ runner.os }}-frontend-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.working-directory }}

      - name: Run Cypress e2e tests
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          start: npm start
          parallel: true
          record: true
          wait-on: http://localhost:8000
          wait-on-timeout: 120
          spec: tests/cypress/e2e/*
          config-file: tests/cypress.config.js
          working-directory: ${{ env.working-directory }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  dev-deploy:
    runs-on: ubuntu-latest
    needs:
      - build-image
      - backend-unit-test
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Outputs Debug
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          echo "Tag: ${{ needs.build-image.outputs.image_tag }}"

      - name: Trigger branch deployment
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          curl -s -H "Content-Type: application/json" -X POST \
          -d '{ "tag": "${{ needs.build-image.outputs.image_tag }}" }' \
          ${{ secrets.BRANCH_DEPLOYMENT_HOOK }}

      - name: Trigger dev deployment
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          curl -s -H "Content-Type: application/json" -X POST \
          -d '{ "id": "${{ github.run_id }}" }' \
          ${{ secrets.DEV_DEPLOYMENT_HOOK }}
