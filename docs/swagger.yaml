basePath: /api
definitions:
  model.AgentRequest:
    properties:
      msg:
        type: string
      quantumlabToken:
        type: string
      workspaceID:
        type: string
      workspaceOwner:
        type: string
      workspaceStatus:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  model.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.LoginResponse:
    properties:
      status:
        type: string
    type: object
  model.Role:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.SetAccountStatusRequest:
    properties:
      setStatus:
        type: boolean
      userID:
        type: integer
    type: object
  model.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  model.Template:
    properties:
      accessLevel:
        type: integer
      filename:
        type: string
      icon:
        description: A Base64-encoded string
        type: string
      id:
        type: integer
      parameters:
        type: string
    type: object
  model.User:
    properties:
      accessLevel:
        type: integer
      accountStatus:
        type: boolean
      avatar:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
      quantumlabToken:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      uuid:
        type: string
      workspaces:
        items:
          $ref: '#/definitions/model.Workspace'
        type: array
    type: object
  model.UserListItem:
    properties:
      accessLevel:
        type: integer
      accountStatus:
        type: boolean
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      uuid:
        type: string
    type: object
  model.Workspace:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      lastAccessed:
        type: string
      name:
        type: string
      parameters:
        type: string
      state:
        type: string
      tags:
        type: string
      template:
        $ref: '#/definitions/model.Template'
      templateId:
        type: integer
      type:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
      uuid:
        type: string
    type: object
info:
  contact:
    email: quanchic@student.unimelb.edu.au
    name: Quanchi Chen
  description: A web service API in Go using the Gin framework
  title: QuantumLab Gin Web Service
  version: "1.0"
paths:
  /admin/userStatus:
    put:
      consumes:
      - application/json
      description: Administrator updates desired users account status
      parameters:
      - description: Status Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.SetAccountStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Cannot adjust root admin account status
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update the account status of a user
      tags:
      - user admin
  /admin/users:
    get:
      description: Get all users to list in the table.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserListItem'
            type: array
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get user list
      tags:
      - user admin
  /admin/users/{id}:
    get:
      description: Get detailed information of a user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get user detail
      tags:
      - user admin
    put:
      consumes:
      - application/json
      description: Update a user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update user
      tags:
      - user admin
  /admin/users/invite:
    post:
      consumes:
      - application/json
      description: Invite and create new users.
      parameters:
      - description: List of user emails to send invitation
        in: body
        name: emailList
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "202":
          description: Request Accepted
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Invite and create users
      tags:
      - user admin
  /admin/users/roles:
    get:
      description: Get all roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get all roles
      tags:
      - user admin
  /agent:
    post:
      consumes:
      - application/json
      description: Update the workspace status according to the heartbeat message
        sent by a QuantumLab Agent.
      parameters:
      - description: agent request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AgentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Process the heartbeat message sent by a QuantumLab Agent
      tags:
      - agent
  /auth/currUser:
    get:
      consumes:
      - application/json
      description: Authenticates a token and retrieves associated user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: You are not authorized, There is no token!
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Gets user details based on the current token
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log a user in if the provided email and password are correct.
      parameters:
      - description: login credential
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Bad Request (Invalid Email)
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Incorrect Email or Password
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Error Creating Access/Refresh Token
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Log a user in
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Removes both access and refresh JWT Tokens from cookies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
      summary: Removes the JWT token from cookies
  /init:
    get:
      consumes:
      - application/json
      description: Check if QL has users already.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              hasUser:
                type: boolean
            type: object
      summary: Get if has user
      tags:
      - init
    post:
      consumes:
      - application/json
      description: Create the first user as a Root Administrator.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SuccessResponse'
      summary: Initialize root admin
      tags:
      - init
  /templates:
    get:
      description: Get all authorised templates.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Template'
            type: array
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      tags:
      - templates
    post:
      consumes:
      - application/json
      description: Create a new template.
      parameters:
      - description: Data needed for creating a workspace template
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/model.Template'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Request Parse Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      tags:
      - templates
  /templates/{id}:
    delete:
      description: Delete a workspace template.
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Request Parse Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      tags:
      - templates
    put:
      consumes:
      - application/json
      description: Update an existing workspace template.
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated template data
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/model.Template'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Invalid ID / Request Parse Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      tags:
      - templates
  /templates/icons:
    get:
      description: Get the preset template icons.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Failed to retrieve file list
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      tags:
      - templates
  /workspaces:
    post:
      consumes:
      - application/json
      description: Create a workspace.
      parameters:
      - description: New workspace
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/model.Workspace'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Request Parse Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Uexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create workspace
      tags:
      - workspaces
  /workspaces/{id}:
    delete:
      description: Delete a workspace by its ID.
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Delete workspace
      tags:
      - workspaces
    get:
      description: Get a workspace by its ID.
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Workspace'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get workspace by ID
      tags:
      - workspaces
    patch:
      consumes:
      - application/json
      description: Update specific fields of a workspace.
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated workspace metadata
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/model.Workspace'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessResponse'
        "400":
          description: Invalid ID / Request Parse Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update workspace
      tags:
      - workspaces
  /workspaces/users/{id}:
    get:
      description: Get all workspaces of a user. An empty array is returned if the
        user has no workspace.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Workspace'
            type: array
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Unexpected System Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get all workspaces by user
      tags:
      - workspaces
swagger: "2.0"
