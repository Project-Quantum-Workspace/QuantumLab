// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Quanchi Chen",
            "email": "quanchic@student.unimelb.edu.au"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Log a user in if the provided email and password are correct.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Log a user in",
                "parameters": [
                    {
                        "description": "login credential",
                        "name": "credential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request (Invalid Email)",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Incorrect Password",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Email Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error Creating Access/Refresh Token",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/templates":{
            "post":{
                "description": "Allow users to create own template.",
                "consumes":[
                    "application/json"
                ],
                "produces":[
                    "application/json"
                ],
                "summary": "create a new template",
                "parameters":[
                    {
                        "description": "required input to create a template",
                        "name": "template",
                        "in":"body",
                        "required":ture,
                        "schema":{
                            "$ref": "#/definitions/model.CreateTemplate"
                        }

                    }
                ],
                "responses":{
                    "200":{
                        "description":"OK",
                       
                    },
                    "400": {
                        "description": "Bad Request(Invalid Request Body)",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                   
                }
            },
            "get":{
                "description":"Allow users to get all templates.",
                "consumes":[
                    "application/json"
                ],
                "produces":[
                    "application/json"
                ],
                "summary": "read all templates.",
                "responses":{
                    "200":{
                        "description":"OK",
                        "schema":{
                            "$ref":"#/definitions/model.GTResponse"
                        }
                       
                    }
                }

            }

            
        },
        "/api/templates/:id":{
            "put":{
                "description":"Allow users to update a exist template.",
                "consumes":[
                    "application/json"
                ],
                "produces":[
                    "application/json"
                ],
                "summary":"update a template.",
                "parameters":[
                    {
                        "description": "required input to update a template",
                        "name": "template",
                        "in":"body",
                        "required":ture,
                        "schema":{
                            "$ref": "#/definitions/model.CreateTemplate"
                        }

                    }
                ],
                "responses":{
                    "200":{
                        "description":"OK",
                       
                    },
                    "400": {
                        "description": "Bad Request(Invalid Request Body)",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The Template Id is invalid",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                   
                }
            },

            "delete":{
                "description":"Allow users to delete a exist template.",
                "cosumes":[
                    "application/json"
                ],
                "produces":[
                    "application/json"
                ],
                "summary":"delete a template.",
                "responses":{
                    "200":{
                        "description":"OK",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                       
                    },
                    "404":{
                        "description":"The Template Id is invalid",
                        "schema":{
                            "$ref":"#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }

        }
    },
    "definitions": {
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.LoginResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "model.GTResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.CreateTemplate":{
            "type": "object",
            "required": [
                "Parameters",
                "Access_level",
                "File_name"
            ],
            "properties": {
                "Parameters": {
                    "type": "string"
                },
                "Access_level": {
                    "type": "string",
                    "example":"0"
                },
                "File_name": {
                    "type": "string",
                    "example":"example_template1"
                },
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "QuantumLab Gin Web Service",
	Description:      "A web service API in Go using the Gin framework",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
